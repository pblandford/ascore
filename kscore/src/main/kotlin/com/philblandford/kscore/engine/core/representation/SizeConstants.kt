package com.philblandford.kscore.engine.core.representation

import com.philblandford.kscore.engine.types.PageSize

val MAX_VOICE = 4

val BLOCK_HEIGHT = 32
val LINE_THICKNESS = BLOCK_HEIGHT / 4

val STEM_HEIGHT = BLOCK_HEIGHT * 7
val STEM_HEIGHT_SMALL = BLOCK_HEIGHT * 5
val STEM_MIN_HEIGHT = BLOCK_HEIGHT * 4
val STEM_MIN_CLEAR = BLOCK_HEIGHT * 3

val SLASH_WIDTH = BLOCK_HEIGHT*2
val SLASH_HEIGHT = BLOCK_HEIGHT*2

val BAR_EMPTY_WIDTH = BLOCK_HEIGHT * 16

val STAVE_HEIGHT = BLOCK_HEIGHT * 8
val STAVE_MARGIN = BLOCK_HEIGHT * 6
val STAVE_GAP = 0
val STAVE_GAP_MIN = STAVE_GAP/2
val STAVE_GAP_MAX = BLOCK_HEIGHT*12
val STAVE_HEADER_GAP = BLOCK_HEIGHT / 2
val STAVE_JOIN_THICKNESS = BLOCK_HEIGHT
val STAVE_JOIN_END_HEIGHT = BLOCK_HEIGHT * 4

val PREHEADER_GAP = BLOCK_HEIGHT * 2

val PLAYBACK_MARKER_HEIGHT = STAVE_HEIGHT * 2 - BLOCK_HEIGHT * 4

val SYSTEM_GAP = BLOCK_HEIGHT * 12
val SYSTEM_GAP_MAX = SYSTEM_GAP*2
val SYSTEM_GAP_MIN = SYSTEM_GAP/2

val BAR_START_MARGIN = BLOCK_HEIGHT * 2

val PAGE_RATIO = 1.41f
val PAGE_BASE_WIDTH = BLOCK_HEIGHT * 235


val pageWidths = mapOf(
  PageSize.A2 to (PAGE_BASE_WIDTH * PAGE_RATIO * PAGE_RATIO).toInt(),
  PageSize.A3 to (PAGE_BASE_WIDTH * PAGE_RATIO).toInt(),
  PageSize.A4 to PAGE_BASE_WIDTH,
  PageSize.A5 to (PAGE_BASE_WIDTH / PAGE_RATIO).toInt(),
  PageSize.A6 to (PAGE_BASE_WIDTH / (PAGE_RATIO*2)).toInt(),
  PageSize.A7 to (PAGE_BASE_WIDTH / (PAGE_RATIO*3)).toInt()
)

val PAGE_WIDTH = pageWidths[PageSize.A4]!!

val PAGE_WIDTH_MIN = (pageWidths[PageSize.A7] ?: PAGE_WIDTH) / 2
val PAGE_WIDTH_MAX = (pageWidths[PageSize.A2] ?: PAGE_WIDTH) * 2
val PAGE_HEIGHT = (PAGE_WIDTH * PAGE_RATIO).toInt()

val PAGE_LEFT_MARGIN = BLOCK_HEIGHT * 7
val PAGE_RIGHT_MARGIN = BLOCK_HEIGHT * 7
val PAGE_TOP_MARGIN = BLOCK_HEIGHT * 10
val PAGE_BOTTOM_MARGIN = BLOCK_HEIGHT * 20

val PAGE_NUMBER_HEIGHT = BLOCK_HEIGHT*5


val TITLE_HEIGHT = BLOCK_HEIGHT * 7
val TITLE_AREA_HEIGHT = TITLE_HEIGHT * 3

val SEGMENT_SPACE_MIN = BLOCK_HEIGHT * 3
val SEGMENT_SPACE_MAX = BLOCK_HEIGHT * 20

val SHARP_WIDTH = (BLOCK_HEIGHT*1.5).toInt()
val SHARP_HEIGHT = BLOCK_HEIGHT * 6
val SHARP_OFFSET = (BLOCK_HEIGHT * 3).toInt()
val SHARP_GAP = BLOCK_HEIGHT / 2

val FLAT_WIDTH = (BLOCK_HEIGHT * 2).toInt()
val FLAT_HEIGHT = BLOCK_HEIGHT * 5
val FLAT_OFFSET = (BLOCK_HEIGHT * 3.5).toInt()
val FLAT_GAP = BLOCK_HEIGHT / 2

val DOUBLE_SHARP_WIDTH = BLOCK_HEIGHT * 2
val DOUBLE_SHARP_HEIGHT = BLOCK_HEIGHT * 2
val DOUBLE_SHARP_OFFSET = BLOCK_HEIGHT
val DOUBLE_SHARP_GAP = BLOCK_HEIGHT / 2

val NATURAL_WIDTH = (BLOCK_HEIGHT * 2).toInt()
val NATURAL_HEIGHT = BLOCK_HEIGHT * 5
val NATURAL_OFFSET = (BLOCK_HEIGHT * 2.5).toInt()
val NATURAL_GAP = BLOCK_HEIGHT / 2

val BEAM_THICKNESS = BLOCK_HEIGHT
val BEAM_GAP = BLOCK_HEIGHT / 2
val MINIBEAM_WIDTH = BLOCK_HEIGHT * 2
val BEAM_MAX_GRADIENT = 0.3f

val DOT_WIDTH = (BLOCK_HEIGHT * 0.75).toInt()

val TAIL_HEIGHT = BLOCK_HEIGHT * 4
val TAIL_HEIGHT_SMALL = BLOCK_HEIGHT * 3
val TAIL_GAP = (BLOCK_HEIGHT * 1.5).toInt()

val LEDGER_WIDTH = BLOCK_HEIGHT * 4
val LEDGER_WIDTH_SMALL = BLOCK_HEIGHT * 3
val LEDGER_OFFSET = (BLOCK_HEIGHT * 0.6).toInt()
val LEDGER_THICKNESS = BLOCK_HEIGHT / 6

val ORNAMENT_HEIGHT = (BLOCK_HEIGHT * 3).toInt()
val ORNAMENT_OFFSET = BLOCK_HEIGHT
val ORNAMENT_ACCIDENTAL_GAP = BLOCK_HEIGHT/2

val ARTICULATION_OFFSET = ORNAMENT_OFFSET
val ARTICULATION_GAP = ARTICULATION_OFFSET/2

val DYNAMIC_GAP = (BLOCK_HEIGHT * 1.5).toInt()
val DYNAMIC_HEIGHT = BLOCK_HEIGHT * 5

val FERMATA_HEIGHT = BLOCK_HEIGHT * 3

val NAVIGATION_HEIGHT = BLOCK_HEIGHT * 6

val BREAK_HEIGHT = BLOCK_HEIGHT*4

val VOLTA_HEIGHT = BLOCK_HEIGHT*3

val REPEAT_BAR_WIDTH = BLOCK_HEIGHT * 4
val REPEAT_BAR_HEIGHT = BLOCK_HEIGHT * 4
val REPEAT_BAR_THICKNESS = (LINE_THICKNESS * 2.5).toInt()
val REPEAT_BAR_DOT_WIDTH = (DOT_WIDTH * 1.5).toInt()

val MULTIBAR_OFFSET_X = BLOCK_HEIGHT * 2
val MULTIBAR_NUMBER_HEIGHT = BLOCK_HEIGHT * 4
val MULTIBAR_NUMBER_OFFSET = BLOCK_HEIGHT * 3
val MULTIBAR_THICKNESS = BLOCK_HEIGHT*2
val MULTIBAR_VERTICAL_HEIGHT = BLOCK_HEIGHT * 4

val PAUSE_WIDTH = BLOCK_HEIGHT*6

val OCTAVE_HEIGHT = BLOCK_HEIGHT*4
val PEDAL_HEIGHT = BLOCK_HEIGHT*4

val SLUR_THICKNESS = LINE_THICKNESS
val SLUR_OVERHANG = BLOCK_HEIGHT * 4
val SLUR_OVERHANG_VERTICAL = BLOCK_HEIGHT
val SLUR_BEZIER_GUESS = BLOCK_HEIGHT * 2

val TIE_OVERHANG_START = BLOCK_HEIGHT*4
val TIE_OVERHANG_END = BLOCK_HEIGHT*2

val FINAL_BAR_LINE_THICK = BLOCK_HEIGHT
val DOUBLE_BAR_LINE_GAP = BLOCK_HEIGHT/2
val REPEAT_DOT_WIDTH = BLOCK_HEIGHT

val FINAL_BAR_LINE_WIDTH = FINAL_BAR_LINE_THICK + DOUBLE_BAR_LINE_GAP + LINE_THICKNESS

val TEXT_SIZE = BLOCK_HEIGHT * 4
val TEXT_MIN_SIZE = BLOCK_HEIGHT / 2
val TEXT_MAX_SIZE = BLOCK_HEIGHT * 20
val TITLE_TEXT_SIZE = BLOCK_HEIGHT * 8
val SUBTITLE_TEXT_SIZE = BLOCK_HEIGHT * 6
val COMPOSER_TEXT_SIZE = BLOCK_HEIGHT * 6

val LYRIC_SIZE = BLOCK_HEIGHT*5
val HARMONY_SIZE = BLOCK_HEIGHT*5

val GLISSANDO_HEIGHT = BLOCK_HEIGHT*2
val GLISSANDO_EXTRA = BLOCK_HEIGHT*12

val EXPRESSION_DASH_LENGTH = BLOCK_HEIGHT*2
val EXPRESSION_DASH_GAP = BLOCK_HEIGHT*5

val TUPLET_NUMBER_HEIGHT = BLOCK_HEIGHT*2

val REHEARSAL_MARK_SIZE = BLOCK_HEIGHT*5
val REHEARSAL_MARK_LINE_THICKNESS = LINE_THICKNESS*2

val SYSTEM_SYMBOL_GAP = BLOCK_HEIGHT * 3

val ACCENT_HEIGHT = (BLOCK_HEIGHT * 1.5).toInt()
val TENUTO_LENGTH = BLOCK_HEIGHT * 2
val TENUTO_THICKNESS = LINE_THICKNESS * 2

val ACCENT_OFFSET = BLOCK_HEIGHT/2
val STACCCATO_OFFSET = BLOCK_HEIGHT
val MARCATO_OFFSET = BLOCK_HEIGHT/2
val STACCATISSIMO_OFFSET = BLOCK_HEIGHT/2

val MARCATO_HEIGHT = BLOCK_HEIGHT * 2

val DOWNBOW_HEIGHT = BLOCK_HEIGHT*2
val UPBOW_HEIGHT = BLOCK_HEIGHT*2
val LH_PIZZICATO_HEIGHT = BLOCK_HEIGHT*2
val SNAP_PIZZICATO_HEIGHT = BLOCK_HEIGHT*2
val HARMONIC_HEIGHT = BLOCK_HEIGHT*2

val FINGERING_HEIGHT = BLOCK_HEIGHT*2
val FINGERING_OFFSET = BLOCK_HEIGHT/2

val SEMIBREVE_WIDTH = BLOCK_HEIGHT*3
val TADPOLE_WIDTH = BLOCK_HEIGHT*2
val VOICE_CONFLICT_GAP = BLOCK_HEIGHT/4

val MIN_SEGMENT_CLEARANCE = BLOCK_HEIGHT*2

val REST_LINE_V1 = BLOCK_HEIGHT * -2
val REST_LINE_V2 = BLOCK_HEIGHT * 4
val REST_MAX_HEIGHT = BLOCK_HEIGHT * 6